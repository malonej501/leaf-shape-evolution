"""For generating parameter.h file for simulation steps."""
import os
import numpy as np


def Input(pdict, wd, wid):

    # Change the directory to wherever you want the .h file to generate
    os.chdir(wd)

    # create a list from the values for the initial state array in pdict by matching with the key I0-12
    b = [pdict["I"+str(i)] for i in range(0, 13)]

    # Specify the lines of text we want to write and insert the parameters for this particular iteration of the model from the input parameter_dictionary created in Looper.py
    lines = [
        "/*parameters*/",
        "",
        "",
        "#ifndef PARAMETERS_H",
        "#define PARAMETERS_H",
        "//Model paramters",
        "#define pspace1 {pspace1}".format(**pdict),
        "#define pspace2 {pspace2}".format(**pdict),
        "#define DISPSTEP {DISPSTEP}".format(**pdict),
        "",
        "//-------------------------------------General simulation parameter---------------",
        "",
        "#define GDT {GDT}".format(**pdict),
        "#define FINALFRAME {FINALFRAME}".format(**pdict),
        "//Number of iterations of margin flow".format(**pdict),
        "#define NUMFLOW {NUMFLOW}".format(**pdict),
        "",
        "",
        "",
        "//-------------------------------------Initialization parameters--------------------------------------",
        "#define NSAMP {NSAMP}".format(**pdict),
        "#define I_SAMPDIST {SAMPDIST}".format(**pdict),
        # write out the list excluding any np.nan values
        "float INITSTATE[2*NSAMP-1]={"+",".join(
            [str(int(x)) for x in b if not np.isnan(x)])+"};",
        # "#define SPECIFY_INIT_POSITIONS", #for 12f and 12de
        # "float INITPOS[2*NSAMP-1][2]={\n\t{44,0},\n\t{44,40},\n\t{44,80},\n\t{44,85},\n\t{44,90},\n\t{44,95},\n\t{0,100},\n\t{-44,95},\n\t{-44,90},\n\t{-44,85},\n\t{-44,80},\n\t{-44,40},\n\t{-44,0}\n};", #for 12f and 12de
        "#define PRIMSCALEX {PRIMSCALEX}".format(**pdict),
        "#define PRIMSCALEY {PRIMSCALEY}".format(**pdict),
        "",
        "",
        "//--------------------------------------Marginal patterning--------------------------------------------",
        "",
        "//Parameters for the leaf margin",
        "",
        "//Patterning parameters",
        "#define LASSYMETRY {LASSYMETRY}".format(
            **pdict),  # Potentially good one to alter
        "#define RASSYMETRY {RASSYMETRY}".format(**pdict),
        "#define DIVTHRESH {DIVTHRESH}".format(**pdict),
        "#define CP_DIST {CP_DIST}".format(**pdict),
        "#define FILLNONAPICALINTERVALS {FILLNONAPICALINTERVALS}".format(
            **pdict),
        "{DEFINE_TERMINAL_LEAFLET_BASE}".format(
            **pdict),  # for 12f and 12de
        # CHANGE TO 3 for 12f and de
        "{BOUNDARY_MORPHOGEN}".format(**pdict),
        "",
        "//Parameters for various compounds",
        "#define NCOMP {NCOMP}".format(**pdict),
        "#define INTERVAL1 {INTERVAL1}".format(**pdict),
        "#define INTERVAL2 {INTERVAL2}".format(**pdict),
        "#define INTERVAL3 {INTERVAL3}".format(**pdict),
        "#define INTERVAL4 {INTERVAL4}".format(**pdict),
        "#define NEWAXISINTS {NEWAXISINTS}".format(**pdict),
        "#define NEWAXISINTE {NEWAXISINTE}".format(**pdict),
        "",
        "#define FAIRING1 {FAIRING1}".format(**pdict),
        "#define CURVATURE1 {CURVATURE1}".format(**pdict),
        "#define STRETCH1 {STRETCH1}".format(**pdict),
        "#define CFLOW1 {CFLOW1}".format(**pdict),
        "#define NORMAL1 {NORMAL1}".format(**pdict),
        "#define TIP_GROWTH1 {TIP_GROWTH1}".format(**pdict),
        "#define CPDIST1 {CPDIST1}".format(**pdict),
        "#define METRIC1 {METRIC1}".format(**pdict),
        "#define EXTENDABLE1 {EXTENDABLE1}".format(**pdict),
        "#define EXTENDABLE_CONTEXT1 {EXTENDABLE_CONTEXT1}".format(
            **pdict),
        "#define PATTERNABLE1 {PATTERNABLE1}".format(**pdict),
        "#define COMPETENCE1 {COMPETENCE1}".format(**pdict),
        "#define COMPETENCET1 {COMPETENCET1}".format(**pdict),
        "",
        "#define FAIRING2 {FAIRING2}".format(**pdict),
        "#define CURVATURE2 {CURVATURE2}".format(**pdict),
        "#define STRETCH2 {STRETCH2}".format(**pdict),
        "#define CFLOW2 {CFLOW2}".format(**pdict),
        "#define NORMAL2 {NORMAL2}".format(**pdict),
        "#define TIP_GROWTH2 {TIP_GROWTH2}".format(**pdict),
        "#define CPDIST2 {CPDIST2}".format(**pdict),
        "#define METRIC2 {METRIC2}".format(**pdict),
        "#define EXTENDABLE2 {EXTENDABLE2}".format(**pdict),
        "#define EXTENDABLE_CONTEXT2 {EXTENDABLE_CONTEXT2}".format(
            **pdict),
        "#define PATTERNABLE2 {PATTERNABLE2}".format(**pdict),
        "#define COMPETENCE2 {COMPETENCE2}".format(**pdict),
        "#define COMPETENCET2 {COMPETENCET2}".format(**pdict),
        "",
        "#define FAIRING3 {FAIRING3}".format(**pdict),
        "#define CURVATURE3 {CURVATURE3}".format(**pdict),
        "#define STRETCH3 {STRETCH3}".format(**pdict),
        "#define CFLOW3 {CFLOW3}".format(**pdict),
        "#define NORMAL3 {NORMAL3}".format(**pdict),
        "#define TIP_GROWTH3 {TIP_GROWTH3}".format(**pdict),
        "#define CPDIST3 {CPDIST3}".format(**pdict),
        "#define METRIC3 {METRIC3}".format(**pdict),
        "#define EXTENDABLE3 {EXTENDABLE3}".format(**pdict),
        "#define EXTENDABLE_CONTEXT3 {EXTENDABLE_CONTEXT3}".format(
            **pdict),
        "#define PATTERNABLE3 {PATTERNABLE3}".format(**pdict),
        "#define COMPETENCE3 {COMPETENCE3}".format(**pdict),
        "#define COMPETENCET3 {COMPETENCET3}".format(**pdict),
        "",
        "",
        "#define FAIRING4 {FAIRING4}".format(**pdict),
        "#define CURVATURE4 {CURVATURE4}".format(**pdict),
        "#define STRETCH4 {STRETCH4}".format(**pdict),
        "#define CFLOW4 {CFLOW4}".format(**pdict),
        "#define NORMAL4 {NORMAL4}".format(**pdict),
        "#define TIP_GROWTH4 {TIP_GROWTH4}".format(**pdict),
        "#define CPDIST4 {CPDIST4}".format(**pdict),
        "#define METRIC4 {METRIC4}".format(**pdict),
        "#define EXTENDABLE4 {EXTENDABLE4}".format(**pdict),
        "#define EXTENDABLE_CONTEXT4 {EXTENDABLE_CONTEXT4}".format(
            **pdict),
        "#define PATTERNABLE4 {PATTERNABLE4}".format(**pdict),
        "#define COMPETENCE4 {COMPETENCE4}".format(**pdict),
        "#define COMPETENCET4 {COMPETENCET4}".format(**pdict),
        "",
        "//--------------------------------------Vascular patterning parameters--------------------",
        "",
        "#define MAXANGLE {MAXANGLE}".format(**pdict),
        "#define AXISANGLE {AXISANGLE}".format(**pdict),
        "//Local vs global resistance minimization".format(**pdict),
        "#define GLOBAL_RESISTANCE {GLOBAL_RESISTANCE}".format(**pdict),
        "",
        "//--------------------------------------Growth and fairing parameters----------------------------------",
        "",
        "#define UNIFORM_GROWTH {UNFORM_GROWTH}".format(**pdict),
        "",
        "//Growth falloff for tip-growth".format(**pdict),
        "#define TG_START_X {TG_START_X}".format(**pdict),
        "#define TG_END_X {TG_END_X}".format(**pdict),
        "",
        "//Growth falloff for flow".format(**pdict),
        "#define FG_START_X {FG_START_X}".format(**pdict),
        "#define FG_END_X {FG_END_X}".format(**pdict),
        "",
        "//Vein growth rate",
        "#define VG_GRATE {VG_GRATE}".format(**pdict),
        "#define VG_START_X {VG_START_X}".format(**pdict),
        "#define VG_END_X {VG_END_X}".format(**pdict),
        "",
        "//Age-dependent tip growth",
        "#define CP_AD_TIP_GROWTH {CP_AD_TIP_GROWTH}".format(**pdict),
        "#define CP_ADTG_FALLOFF {CP_ADTG_FALLOFF}".format(**pdict),
        "//Age-dependent axis growth",
        "#define AX_AD_AXIS_GROWTH {AX_AD_AXIS_GROWTH}".format(**pdict),
        "#define AX_ADAG_FALLOFF {AX_ADAG_FALLOFF}".format(**pdict),
        "",
        "//Increased growth of the apex relative to other CPs",
        "#define APEX_TIP_GROWTH {APEX_TIP_GROWTH}".format(**pdict),
        "",
        "",
        "//ASYMMETRIC_FAIRING",
        "#define ASYMMETRIC_FAIRING {ASYMMETRIC_FAIRING}".format(**pdict),
        "#define ASYMM_PRE {ASYMM_PRE}".format(**pdict),
        "#define ASYMM_POST {ASYMM_POST}".format(**pdict),
        "",
        "//SHARP LEAF TIP",
        "#define SHARP_LEAF_TIP {SHARP_LEAF_TIP}".format(**pdict),
        "",
        "//Only outward propagation for webbing?",
        "#define INTERNAL_FLOW {INTERNAL_FLOW}".format(**pdict),
        "",
        "",
        "//For uniform growth, the compound marking the petiole (which does not expand)",
        "#define PETIOLE_COMPOUND {PETIOLE_COMPOUND}".format(**pdict),
        "#define PETIOLE_EXTEND {PETIOLE_EXTEND}".format(**pdict),
        "",
        "",
        "",
        "//----------------------------------------Mesh parameters--------------------------------------------------",
        "",
        "//Parameters for mesh",
        "#define QUAD_ERR_THRESH {QUADD_ERR_THRESH}".format(**pdict),
        "",
        "",
        "",
        "//----------------------------------------Visualization parameters-----------------------------------------",
        "",
        "//Visualization parameters",
        "#define COMPWIDTH {COMPWIDTH}".format(**pdict),
        "",
        "//Vein visualization parameters",
        "#define BB_WIDTH_MULT {BB_WIDTH_MULT}".format(**pdict),
        "",
        "#define MARGIN_WIDTH {MARGIN_WIDTH}".format(**pdict),
        "",
        "",
        "#define SCALE_WIDTH_BY_BB {SCALE_WIDTH_BY_BB}".format(**pdict),
        # "#define SCALE_WIDTH_BY_BB true".format(**pdict),
        "",
        "",
        "#define SUPRESSED_COMP {SUPRESSED_COMP}".format(**pdict),
        "",
        "//Pipemodel parameters",
        "#define PM_POW {PM_POW}".format(**pdict),
        "#define PM_WIDTH {PM_WIDTH}".format(**pdict),
        "#define PM_INC {PM_INC}".format(**pdict),
        "#define PM_SAMP {PM_SAMP}".format(**pdict),
        "",
        "#endif"
    ]

    # With statement is the same as defining fh (called fh because it is a file handler) as open("parameters.h","w"), then ending the code with fh.close()
    with open(f"MyParameters{wid}.h", "w") as fh:
        for line in lines:
            fh.write(line)
            fh.write("\n")
